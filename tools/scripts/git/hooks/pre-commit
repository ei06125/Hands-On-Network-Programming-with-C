#!/bin/bash

# =============================================================================
# Fun Fact: we can use the following shebang line for cross-compiling:
# /* #!/bin/sh; C:/Program\ Files/path/to/Git/usr/bin/sh.exe */
# according to https://www.youtube.com/watch?v=fMYv6-SZsSo
# =============================================================================

git_dir=$(git rev-parse --show-toplevel)
cd $git_dir 1>pre-commit.log
source $(pwd)/tools/scripts/utils/logger.sh
cd - 1> pre-commit.log
rm pre-commit.log

log_info "Running pre-commit hook..."

# =============================================================================
# Assert that git user's email is valid (under the company's domain)
# =============================================================================

# change `domain` to use your company's domain
# domain="vrviu.com"
# usermail=$(git config user.email)
# if [[ "$usermail" != *"@$domain" ]]; then
#     log_fatal "Invalid username: $usermail! Please config git to use your company's email address."
#     exit 1
# fi

# We could also check if the username is within a list of names

# =============================================================================
# TODO:
# Perform a clean build iff source, header or cmake files have been modified
# =============================================================================

CMAKE_BUILD_TYPE=Release
CMAKE_BINARY_DIR=build/CI/
CMAKE_TEST_TARGET=net_unit_tests

CMAKELIST_STAGED_FILES=`git status -s | awk '{print $2}' | grep CMakeLists.txt`
log_debug $CMAKELIST_STAGED_FILES

CPP_STAGED_FILES_EXTENSIONS=`git status -s | awk '{print $2}' | sed -e 's/.*\(\.[a-zA-Z0-9]*\)$/\1/' | uniq -c | grep -e c -e cpp -e h -w `
log_debug $CPP_STAGED_FILES_EXTENSIONS

# =============================================================================
# Format all (modified) source, header and cmake files
# =============================================================================

log_info "Formatting modified files..."
# clang-format
find . -path "./include/**.h" | xargs -I % clang-format -i %
find . -path "./include/**.hpp" | xargs -I % clang-format -i %
find . -path "./lib/**.h" | xargs -I % clang-format -i %
find . -path "./lib/**.hpp" | xargs -I % clang-format -i %
find . -path "./lib/**.cpp" | xargs -I % clang-format -i %
find . -path "./src/**.h" | xargs -I % clang-format -i %
find . -path "./src/**.hpp" | xargs -I % clang-format -i %
find . -path "./src/**.cpp" | xargs -I % clang-format -i %
find . -path "./tests/**.h" | xargs -I % clang-format -i %
find . -path "./tests/**.hpp" | xargs -I % clang-format -i %
find . -path "./tests/**.cpp" | xargs -I % clang-format -i %
# cmake-format
find . -path "./CMakeLists.txt" | xargs -I % cmake-format -i % -c .cmake-format.yaml 2>/dev/null
find . -path "./**/*.cmake" | xargs -I % cmake-format -i % -c .cmake-format.yaml 2>/dev/null
find . -path "./src/**/CMakeLists.txt" | xargs -I % cmake-format -i % -c .cmake-format.yaml 2>/dev/null
find . -path "./lib/**/CMakeLists.txt" | xargs -I % cmake-format -i % -c .cmake-format.yaml 2>/dev/null
find . -path "./tests/**/CMakeLists.txt" | xargs -I % cmake-format -i % -c .cmake-format.yaml 2>/dev/null
log_info "Formatting modified files -- DONE"

# =============================================================================
# CMake configure, build and test stages
# =============================================================================

# -----------------------------------------------------------------------------
# Generating
# -----------------------------------------------------------------------------
log_info "Generating build system..."
cmake -S . -B $CMAKE_BINARY_DIR -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE

if [[ "$?" != 0 ]]; then
    log_error "Generating - FAILED"
    exit 1
else
    log_info "Generating build system -- done"
fi

# -----------------------------------------------------------------------------
# Building
# -----------------------------------------------------------------------------
log_info "Building..."
cmake --build $CMAKE_BINARY_DIR --config $CMAKE_BUILD_TYPE --target $CMAKE_TEST_TARGET

if [[ "$?" != 0 ]]; then
    log_error "Building - FAILED"
    exit 1
else
    log_info "Building -- done"
fi

# -----------------------------------------------------------------------------
# Testing
# -----------------------------------------------------------------------------
log_info "Testing..."
ctest --test-dir $CMAKE_BINARY_DIR -C $CMAKE_BUILD_TYPE --output-on-failure
if [[ "$?" != 0 ]]; then
    log_error "Testing - FAILED"
    exit 1
else
    log_info "Testing - DONE"
fi
